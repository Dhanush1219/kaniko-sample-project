trigger:
- main

pool:
  name: keda-selfhosted-agent-pool  

variables:
  SYSTEM_DEBUG: true  
  ACR_NAME: "hardikpoc"
  IMAGE_NAME: "test-image"
  IMAGE_TAG: "v3"
  NAMESPACE: "azure-devops"

stages:
- stage: Build
  displayName: Build and Push Image
  jobs:
  - job: BuildAndPush
    displayName: Build and Push using Kaniko
    steps:
    - task: Kubernetes@1
      displayName: "Test K8s Service Connection"
      inputs:
        connectionType: "Kubernetes Service Connection"
        kubernetesServiceEndpoint: "kaniko-test"
        namespace: "$(NAMESPACE)"
        command: "get"
        arguments: "pods"

    - task: Kubernetes@1
      displayName: "Apply Kaniko Job Manifest"
      inputs:
        connectionType: "Kubernetes Service Connection"
        kubernetesServiceEndpoint: "kaniko-test"
        namespace: "$(NAMESPACE)"
        command: "apply"
        useConfigurationFile: true
        configurationType: "inline"
        inline: |
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: kaniko-build
            namespace: $(NAMESPACE)
          spec:
            backoffLimit: 1
            ttlSecondsAfterFinished: 300
            template:
              spec:
                serviceAccountName: kaniko-serviceaccount  # Use the new Service Account
                containers:
                - name: kaniko
                  image: gcr.io/kaniko-project/executor:v1.9.1
                  args:
                    - "--context=git://github.com/Dhanush1219/kaniko-sample-project.git"
                    - "--destination=$(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(IMAGE_TAG)"
                    - "--verbosity=debug"
                  volumeMounts:
                  - name: acr-secret
                    mountPath: /kaniko/.docker
                    readOnly: true
                restartPolicy: Never
                volumes:
                - name: acr-secret
                  secret:
                    secretName: kanikopushacr
                    items:
                      - key: .dockerconfigjson
                        path: config.json
